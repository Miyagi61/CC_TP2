Cabeçalho:
	Tem 9 Bytes
	1 byte para indicar o tipo (mensagem protocolar ou pacote de ficheiros)
	4 bytes para indicar o número de sequência
	4 bytes inteiro que identifica o ficheiro ao que o pacote se refere
	atraves de uma funcao de hash a partir do seu nome

Listar ficheiros:
	-Tipo 0
	-Divisor é o #
	-Ao listar o ficheiro é passado o nome do ficheiro 
	 e o tamanho do ficheiro
	-Tem de existir um contador do tamanho do pacote, se inserir o 
	proximo nome fizer ultrapassar o tamanho limite, criar um novo pacote
	-No ultimo campo um inteiro com o # de ficheiros da lista total

Pacotes de dados:
	-Tipo 1
	-800 bytes de tamanho máximo (a contar com o cabeçalho)
	-Numero de sequencia começa em 1 e indica a ordem dos pacotes
	-Na primeira comunicacao o "cliente" envia no corpo o nome da pasta
	a sincronizar com nr de seq = -1 e hash sem signifiacdo
	-seq=0 -> Nome do ficheiro
	-hash é o tamanho do pacote

Pedido de ficheiro:
	-Tipo 2
	-Numero de sequencia sem significado
	-Chave a partir da string da lista de nomes

Pacotes em falta(NOACK)
	-Tipo 3
	-Numero de seq (1..N) : pacote em falta

Pacotes em falta da Lista de ficheiros(NOACKL)
	-Tipo 4
	-Numero de seq (1..N) : pacote em falta

Erros
	-Tipo 5
	-Seq = 0 -> Password errada
	-Seq = 1 -> 

Pacote de ficheiros a enviar
    -Tipo 6
    -Separado por " "
    -Numero de seq (0..N)
    -Tamanho do pacote na hash

Pacote de ficheiros a enviar(NOACK)
    -Tipo 7
    -Numero de seq (0..N)

Pacote a indicar nova socket
    -Tipo 8
    -Numero de pacotes esperado
    -Hash vazio

Ao iniciar a sincronização o "servidor" envia a lista de ficheiros na pasta
pedida ao "cliente"

"A" envia uma pasta onde B tem de enviar a sua lista de ficheiros,
se em "B" não existir tem de criar e mandar vazio, no caso de existir tem
de mandar a sua lista de ficheiros e o "A" trata de encontrar as diferenças
e enviar/pedir os ficheiros que faltam.

Uma thread a espera de conexão, 

Passos:
	-Dividir um ficheiro em pacotes
	-Contruir o listFiles
	-Tornar a informacao serializable
	-Serialize e deserialize
	-Threads
	-Conexão por UDP (Sockets)
	-Registo de logs
	-pedidos HTTP GET com estado de funcionamento
	-
